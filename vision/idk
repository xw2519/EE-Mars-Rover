- added uart over IO0 and IO1 to communicate with control subsystem.
- Set camera to always use maximum zoom and maximum exposure,
could implement variable exposure and gain later.
- Detect balls using colours.
- Exploit the fact that the environment is a flat plane.
Only need to use x coordinates of beginning and end of balls.
- Need sine to determine distance from obstacles,
using fixed point approximation instead of sending data to command
to reduce latency.

- How to find balls:
Yellow : Find places where "green[7:1] + red[7:2] + blue[7:2]" is large.
Pink : ((red>=192)&(green<128)&(blue<128)) or similar has to be true.
Blue : ((red<32)&(green<32)&(blue>=32)) finds darker areas.

assign ball_high = ((red>green+16)&(red>blue+16)) ? {8'hff, 8'h0, 8'h0} :
 ((green>red+16)&(green>blue+16)) ? {8'h0, 8'hff, 8'h0} :
 ((blue>red+16)&(blue>green+16)) ? {8'h0, 8'h0, 8'hff} :
 {8'h0, 8'h0, 8'h0};

assign ball_high = ((red>=56)&(green<64)&(blue<32)) ? {8'hff, 8'h0, 8'h0} :
 ((red>=192)&(green<128)&(blue<128)) ? {8'hcc, 8'h0, 8'hcc} :
 ((red<64)&(green>=64)&(blue>=64)) ? {8'h0, 8'hcc, 8'hcc} :
 ((red<32)&(green<32)&(blue>=32)) ? {8'h0, 8'h0, 8'hff} :
 ((red>=192)&(green>=192)&(blue<128)) ? {8'hcc, 8'hcc, 8'h0} :
 {8'h0, 8'h0, 8'h0};

assign ball_high = (red>=240) ? {8'hff, 8'h0, 8'h0} :
 (green>=240) ? {8'h0, 8'hff, 8'h0} :
 (blue>=240) ? {8'h0, 8'h0, 8'hff} :
 {8'h0, 8'h0, 8'h0};

- red >= 160
- green >= 192
- blue >= 128
