

Report points               ///////////////////////////////////////////////////////////////////////////////////

Functional requirements

- Avoids obstacles effectively.

- Measures positions of balls.

- Transmits ball information to control subsystem.

Non-functional requirements

- Can collect position and colour of balls given that:
  1. the distance is within 20cm - 80cm
  2. the angle is less than 45 degrees
  3. the ball does not touch the edges of the frame

- In addition, balls can be detected (but data cannot be recorded) within:
  1. distance greater than 14cm
  2. angle smaller than 50 degrees

- Can identify colours of provided balls (red, pink, yellow, green, blue) under sunlight.

- Can accurately determine distance to balls under sunlight and warmer lamp light.

- Automatic gain and exposure calibration to adapt to different light levels.

*- Accelerometer data used to calculate inclination of rover.

- Accelerometer and camera can be calibrated remotely.

- Processes data 6 times per second.

- UART uses acknowledgement to ensure:
  1. all messages are transmitted successfully
  2. important messages are transmitted correctly

- Using dynamic arrays to allow system to easily scale to any number of balls.


Testing conditions

- Tested under sunlight(6500K?) and 3000K 5W LED lamp.
  1. Varied brightness by varying distance to lamp or closing blinds partially.
  2. Varied direction of lamp and sunlight by rotating camera and balls.

- Background was matte painted wall with wooden floor.



The image processor receives a stream of RGB pixel values from the camera, this was chosen over
conversion to HSV because the hue varied greatly when lighting conditions were changed
which lead to poor ball detection and obstacle avoidance performance.

The image processor uses 'filters' to determine whether a given pixel could belong to a ball,
there are two sets of these filters. The first set was designed to be unlikely to report
false negatives across a wide range of lighting conditions, however, this set of filters
provides no data about the colours of the balls detected. For colour detection, a second set
of filters was designed, this set is very unlikely to report false positives. This set contains
five filters, one for each ball colour.

This information is accessible to the nios2 processor over a FIFO message buffer.


Notes                          ///////////////////////////////////////////////////////////////////////////////////

- Added uart over IO0 and IO1 to communicate with control subsystem.

- Set camera to always use minimum zoom and maximum exposure,
could implement variable exposure and gain later.

- Use colours to decide if a pixel is part of a ball.

- Exploit the fact that the environment is a flat plane.
Only need to use x coordinates of beginning and end of balls, message system modified.
The top of the video feed can be removed, only contains background if balls are on the ground.

- Need sine to determine distance from obstacles.
Using fixed point approximation instead of sending data to command
to reduce latency.

- Finding balls in the video feed.
There is no random access to pixel data, it is impossible to compare individual pixels.
Pixels will have to be passed through filters to find pixels that belong to balls.
Conditions are required that are true for balls but not the environment.

All balls    : (red>=160)|(green>=192)|(blue>=128)
Yellow       : Find bright pixels using as brightness "green[7:1] + red[7:2] + blue[7:2]".
Pink + Red   : (red>=192)&(green<128)&(blue<128)
Red          : (red>=64)   & (((red>>1)+(red>>3))>=green)  & ((red>>1)>=blue)
Green/Blue   : (green>=32) & (((green>>1)+(green>>2))>=red) & (green>=(blue>>1))
Blue         : (blue>=48)  & (blue>=red) & (blue>=green) & (blue<144)
Red (Light)  : (red>=144)&(green<96) &(blue<64)
Red (Dark)   : (red>=64) &(green<64) &(blue<32)
Green/Blue(L): (red<64)  &(green>=96)&(blue<128)
Green/Blue(D): (red<32)  &(green>=32)&(blue<64)
Blue (Light) :
Blue (Dark)  : (red<32)  &(green<32) &(blue>=32)

------ Random snips of code that might be useful later ------
assign ball_high = ((red>green+16)&(red>blue+16)) ? {8'hff, 8'h0, 8'h0} :
 ((green>red+16)&(green>blue+16)) ? {8'h0, 8'hff, 8'h0} :
 ((blue>red+16)&(blue>green+16)) ? {8'h0, 8'h0, 8'hff} :
 {8'h0, 8'h0, 8'h0};
assign ball_high = ((red>=56)&(green<64)&(blue<32)) ? {8'hff, 8'h0, 8'h0} :
 ((red>=192)&(green<128)&(blue<128)) ? {8'hcc, 8'h0, 8'hcc} :
 ((red<64)&(green>=64)&(blue>=64)) ? {8'h0, 8'hcc, 8'hcc} :
 ((red<32)&(green<32)&(blue>=32)) ? {8'h0, 8'h0, 8'hff} :
 ((red>=192)&(green>=192)&(blue<128)) ? {8'hcc, 8'hcc, 8'h0} :
 {8'h0, 8'h0, 8'h0};
assign ball_high = (red>=240) ? {8'hff, 8'h0, 8'h0} :
 (green>=240) ? {8'h0, 8'hff, 8'h0} :
 (blue>=240) ? {8'h0, 8'h0, 8'hff} :
 {8'h0, 8'h0, 8'h0};
------ End random code ------

- For calculating distance from size, use d = 2560/x.
This takes size(x) in pixels and returns distance(d) in cm.

- Expanded message system to send colour and position data.

- Rover has large blindspots.
Turn to look for obstacles before moving forwards.
Can never detect obstacles <20cm when starting.

- Added automated calibration when KEY0 is pressed.

- Several filters detect parts of several balls, created a system to interpret
filters triggered and find the colour of balls.

- UART over IO0(TX) and IO1(RX) works when connected to itself.

- Change pink and blue filters to reduce false positives.
- Ensure yellow ball does not trigger any filters, or make a yellow filter.
- Make additional filters that uniquely identify balls?

- Made new set of filters to reduce false positive rate.

- Ball tracking uses colour to decide whether balls are new.
Balls of unidentified colour are problematic.
- Flush ball memory every 10 seconds?
- Add ability to send data of several U.C. balls in a single frame?

- Added accelerometer, need to process data to find angle of rover.


Project Management             ///////////////////////////////////////////////////////////////////////////////////

18/5
- Added UART

20/5
- Added ball detection

21/5
- Improved ball detection

22/5
- Added filters

24/5
- Improved filters

25/5
- Added distance calculation
- Improved filters

26/5
- Added automatic gain adjustment

28/5
- Added dynamic arrays to store ball data (Used more on-chip memory)
- Improved filters
- Expanded message system for colour data

31/5
- Cleaned up temporary files and fixed bugs

2/6
- Added automatic exposure adjustment
- Tested UART

3/5
- Changed UART IP, can transmit data
- Added code to interpret filters and find ball colours

4/5
- UART fully functional
- Improved filter interpretation
